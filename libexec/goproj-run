#!/bin/bash -i

usage() {
  echo "Usage: goproj run [*options] [--] COMMAND"
  echo ""
  echo "Setup Go(lang) environment variables for your project prior to execute the given command."
  echo ""
  echo "Options:"
  echo "    -x  Set GOPATH exclusively to your project path, reseting it instead of prepending to it"
  echo ""
  echo "How it works:"
  echo "    Search for a .goproj file up in the directory tree. If one is found, prepend"
  echo "    it's directory to the GOPATH env variable and execute COMMAND."
  echo ""
  echo "    If no .goproj file is found, it stops when it reaches the root folder, and"
  echo "    executes COMMAND"
  echo ""
  echo "Examples:"
  echo "    goproj run godoc -http=:6060"
  echo ""
  echo "Pro Tip:"
  echo "    You can use an alias trick to make wrap the go tool to always use goproj to setup env variables"
  echo "    for your project."
  echo ""
  echo "        alias go=\"goproj run -- go\""
  echo ""
  echo "    After setting the alias, one can simply do:"
  echo ""
  echo "        go build -a -n"
  echo ""
  echo "    And it will in fact execute:"
  echo ""
  echo "        goproj run -- go build -a -n"
  echo ""
}

# options
opt_x=false

locate_goproj_dir() {
  local dir="$(pwd)"

  while [[ $dir != "/" ]]; do
    if [[ -e "${dir}/.goproj" ]]; then
      echo -n "${dir}"
      return 0
    fi

    dir=$(dirname "${dir}")
  done

  return 1
}

setup_env() {
  local goproj_path=$(locate_goproj_dir)

  if [[ -n $goproj_path ]]; then
    if [[ $opt_h ]]; then
      GOPATH="${goproj_path}"
    else
      GOPATH="${goproj_path}:${GOPATH}"
    fi

    PATH="${GOPATH//://bin:}/bin:${PATH}"

    return 0
  fi

  return 1
}

args=`getopt x $*`
if [ $? != 0 ]
then
  usage
  exit 2
fi

set -- $args

for i; do
  case "${i}" in
  "-x")
    opt_x=true; shift;;
  "--")
    shift; break;;
  esac
done

if [[ -z $@ ]]; then
  usage
  exit 0
fi

setup_env
$@
